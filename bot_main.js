
// Actual constants
const pathSep = '\\';

// IMPORTS
const Discord = require('discord.js');
const sleep = require('system-sleep');
const filesystem = require('fs');
const EOL = require('os').EOL;

// Create the client
const client = new Discord.Client();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BOT CONFIG
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Debug switch
const DEBUGGING = 1;
//Bot token
const token = 'MzIxMzIwNDY2NjIxMTM2ODk2.DBgkLA.zjGqHRJYUf7oba03HCBvRTpauC8';
//Owner id
const owner_id = '192143138817572865'
//Operator flag check
const primary_operator_flag = 'MANAGE_GUILD'
//Default Bot Status
const default_presence = 'invisible'
//Primary command append - Used in channels
var command_append_primary = '!'

//LOGGING
//Directories
//Text channels
const guild_textChannel_base_logging_directory = '.\\logging\\guildTextChat\\'

//File list
var FileArray = new Object();

//File extension
var LogExtension = '.txt';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//PERMISSION CHECKS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Uses a MEMBER object!
function check_guildmember_operator(guild_user){if(check_hard_owner_permission(guild_user.user)){return 1}else if(guild_user.hasPermission(primary_operator_flag)){return 1}else{return 0}}
//Uses a USER object!
function check_hard_owner_permission(user){if(user.id == owner_id){return 1}return 0}
//Uses a MESSAGE object!
function check_operator_from_message(message, guild){if(guild){return check_guildmember_operator(message.member)}else{return check_hard_owner_permission(message.author)}}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Bot system helpers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Bot hard shutdown
async function hard_shutdown(){await sleep(100);client.destroy();await sleep(100);process.exit();}
async function debugOut(text){if(DEBUGGING){console.log(text);}}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Message processing helpers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Uses a MESSAGE object
function check_message_primary_command_append(message){var string = message.cleanContent;if(string.substr(0,1) == command_append_primary){return message.cleanContent.substring(1)}else{return 0}}		
//Uses a MESSAGE object
function is_message_from_guild(message){if(message.guild){return 1}else{return 0}}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Random Functions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Generates "Heads" or "Tails"
function coinflip(){var result = Math.round(Math.random());if(result == 1){result = 'Heads!'}else{result = 'Tails!'}return result}

//PRIMARY COMMAND PARSE CHECKER!
//WIP

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILESYSTEM HELPERS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//File test function
function test_file_logging(){filesystem.appendFile('test.txt','WRITING_SUCCESS', (err) => {if(err) throw err; console.log('test.txt <-- WRITING_SUCCESS');})}
//Directory exists?
function check_directory(path){
	
}
//Make new directory
function make_directory(path){
	
}
//Check if file opened for writing
function is_file_opened(path){
	
}
//Open file for writing
function open_file(path){
	
}
//Automatic File Append
function AutomaticFileAppend(filePath, stringToAppend){
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//LOGGING
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//File test function

//Primary message logger. Do not use regular automatic parsing, this has to be standalone!
function log_message_sorted(message){
	switch(message.channel.type){
		case 'text':
			log_message_sorted_guild(message);
			break;
		case'dm':
			log_message_sorted_DM(message);
			break;
		case'group':
			log_message_sorted_groupDM(message);
			break;
	}
}

//Assume message is from a guild channel
function log_message_sorted_guild(message){
	var directoryPath = (guild_textChannel_base_logging_directory + message.guild.name).replace(/['/'|'\']/g,'_');
	var filePath = (directoryPath + pathSep + message.channel.name + LogExtension).replace(/['/'|'\']/g,'_');
	var currentDate = new Date();
	var logDate = currentDate.toLocaleDateString();
	var logTime = currentDate.toLocaleTimeString();
	var logMessageContents = message.cleanContent;
	var logSender = message.member.displayName;
	var logActualSender = message.author.username;
	var logActualSenderTag = message.author.tag;
	var logString = ('{' + logTime + '} ' + logSender + '[' + logActualSenderTag + '] ' + logMessageContents + EOL);
	debugOut('Message Logging Debug - Guild [' + message.guild.name + '] Channel [' + message.channel.name + ']');
	debugOut('Directory: ' + directoryPath);
	debugOut('File: ' + filePath);
	debugOut('Time: ' + currentDate.toLocaleTimeString());
	debugOut('Date: ' + currentDate.toLocaleDateString());
	debugOut('Sender: ' + logSender + ' [ACTUAL] ' + logActualSender + ' [TAG] ' + logActualSenderTag);
	debugOut('Contents: ' + logMessageContents);
	AutomaticFileAppend(filePath, logString);
}

//Assume message is from a DM
function log_message_sorted_DM(message){
	
}
//Assume message is from a group DM
function log_message_sorted_groupDM(message){
	
}


//When client is successfully logged in.
client.on('ready', () => {
  console.log('Logged in');
  client.user.setStatus(default_presence);
  //test_file_logging();
});

// Create an event listener for messages
client.on('message', message => {
	log_message_sorted(message)
	var guild = is_message_from_guild(message)
	var command_content = check_message_primary_command_append(message)
	if(command_content == 0)
		return
	console.log('Command Parse:');
	console.log(command_content);
	switch(command_content){
		case 'coinflip':
			message.channel.send(coinflip());
			break;
		case 'kill':
			if(check_operator_from_message(message, guild)){
				message.channel.send('Shutting Down');
				hard_shutdown();
			}
			break;
	}
	
	
});
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//STARTUP
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Log our bot in
client.login(token);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//END
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////